import numpy as np


def game_core_v3(number: int = 1) -> int:
    """Функция сравнивает загаданное число с предсказанным. 
    Если предсказанное число больше загаданного,
    то формируем новый интервал, последний элемент которого 
    равен предсказанному числу, 
    если наоборот меньше, то первый элемент равен предсказанному числу
    и угадываем из нового интервала, пока
    не угадаем.

       Функция принимает загаданное число и возвращает число попыток угадывания
    до успешного исхода.

    Args:
        number (int, optional): Загаданное число от 1 до 100 включительно.
    Defaults to 1.

    Returns:
        int: Число попыток
    """
    # Инициализируем начальное значение псевдослучайного числа.
    np.random.seed(42)
    # Инициализируем исходный список чисел для угадывания.
    predict_length = list(range(1, 101))
    # Инициализируем счетчик попыток.
    count = 0
    # Инициализируем первое предсказание.
    predict = np.random.randint(1, 101)

    def predict_interval(predict_length: list) -> list:
        """
         Функция принимает список с последовательностью целых чисел и 
         возвращает срез данной последовательности.

        Args:
        predict_length (list): последовательность целых чисел

        Returns:
        list: срез последовательности целых чисел
        """

        # если предсказанное число больше загаданного
        if predict > number:
            # делаем срез последовательности
            return predict_length[:predict_length.index(predict)]

        # если предсказанное число меньше загаданного
        else:
            return predict_length[predict_length.index(predict):]

    # Инициализируем цикл, пока не угадаем число.
    while number != predict:
        # увеличиваем счетчик на 1
        count += 1
        # если не угадали, то формируем более короткий интервал
        # с помощью функции predict_interval
        predict_length = predict_interval(predict_length)
        # угадываем из более кототеого интервала
        predict = np.random.choice((predict_length))

    return count


print(game_core_v3(12))
